<?php
/**
 * Implements hook_menu().
 */
function tradexperts_menu() {
	return array(
		'getlicensekey' => array(
			'title'           => 'Get license key',
			'page callback'   => 'drupal_get_form',
			'page arguments'  => array('tradexperts_callback_form'),
			'access callback' => TRUE,
			'type'            => MENU_CALLBACK,
		),
	);
}

/**
 * Implements hook_form_alter().
 */
function tradexperts_form_alter(&$form, &$form_state, $form_id) {
	switch ($form_id) {
		case 'user_login_block':
			$form['#attributes']['class'] = array('user-login-block');

			// Hack for disable autocomplete in some browsers for creating correct placeholders.
			// Proof: http://stackoverflow.com/questions/12374442/chrome-browser-ignoring-autocomplete-off
			$form['name']['#weight']        = 0;
			$form['fake_name']              = $form['name'];
			$form['fake_name']['#prefix']   = '<div class="element-hidden">';
			$form['fake_name']['#suffix']   = '</div>';
			$form['fake_name']['#required'] = FALSE;
			$form['fake_name']['#weight']++;

			$form['pass']['#weight']        = 2;
			$form['fake_pass']              = $form['pass'];
			$form['fake_pass']['#prefix']   = '<div class="element-hidden">';
			$form['fake_pass']['#suffix']   = '</div>';
			$form['fake_pass']['#required'] = FALSE;
			$form['fake_pass']['#weight']++;

			$form['actions']['#weight'] = 3;
			$form['links']['#weight']   = 4;


			$form['links']['#markup'] = '<div class="links">' . l(t('Registration'), 'user/register') . ' ' . l(t('Forgot password'), 'user/password') . '</div>';
			break;
	}
}

/**
 * Implements hook_block_info().
 */
function tradexperts_block_info() {
	return array(
		'tradexperts_slideshow' => array(
			'info'  => t('Tradexperts Slideshow'),
			'cache' => DRUPAL_NO_CACHE,
		),
		'tradexperts_brokers' => array(
			'info'  => t('Tradexperts Brokers'),
			'cache' => DRUPAL_NO_CACHE,
		),
		'tradexperts_callback' => array(
			'info'  => t('Tradexperts callback'),
			'cache' => DRUPAL_NO_CACHE,
		),
	);
}

/**
 * Implements hook_block_view().
 */
function tradexperts_block_view($delta = '') {
	$block = array();

	switch ($delta) {
		case 'tradexperts_slideshow':
			$items = tradexperts_slideshow_get_items();

			if (!$items) {
				return array('content' => '');
			}

			$block['content'] = array(
				'#markup' => theme('tradexperts_slideshow', array(
					'slides' => $items,
				)),
				'#attached' => array(
					'js' => array(
						drupal_get_path('module', 'tradexperts') . '/js/mobilyslider.js',
						drupal_get_path('module', 'tradexperts') . '/js/tradexperts.slideshow.js',
					),
					'css' => array(
						drupal_get_path('module', 'tradexperts') . '/css/tradexperts.slideshow.css',
					),
				),
			);
			break;
		case 'tradexperts_brokers':
			$block['content'] = tradexperts_brokers_block();
			$block['subject'] = t('Brokers');
			break;
		case 'tradexperts_callback':
			$block['content'] = drupal_get_form('tradexperts_callback_form');
			break;
	}

	return $block;
}

/**
 * Implements hook_theme().
 */
function tradexperts_theme() {
	return array(
		'tradexperts_slideshow' => array(
			'variables' => array(
				'slider' => 'slider1',
				'slides' => array(),
			),
			'path'     => drupal_get_path('module', 'tradexperts') . '/templates',
			'template' => 'tradexperts-slideshow',
		),
		'tradexperts_brokers' => array(
			'variables' => array(
				'brokers' => array(),
			),
			'path'     => drupal_get_path('module', 'tradexperts') . '/templates',
			'template' => 'tradexperts-brokers',
		),
	);
}

/**
 * Returns items for slide show.
 */
function tradexperts_slideshow_get_items() {
	$nodes = node_load_multiple(array(), array('type' => 'slideshow', 'status' => NODE_PUBLISHED));

	$items = array();

	foreach ($nodes as $node) {
		$field_link = field_get_items('node', $node, 'field_link');
		if (!empty($field_link[0]['url']) && !empty($field_link[0]['title'])) {
			$link = l($field_link[0]['title'], $field_link[0]['url'], array('type' => 'external') + array('attributes' => $field_link[0]['attributes']));
		}
		else {
			$link = '';
		}
		$field_background_image = field_get_items('node', $node, 'field_background_image');
		if (!empty($field_background_image[0]['uri'])) {
			$background_image = $field_background_image[0]['uri'];
		}
		else {
			$background_image = '';
		}
		$field_sub_title=  field_get_items('node', $node, 'field_sub_title');
		if (!empty($field_sub_title[0]['value'])) {
			$sub_title = $field_sub_title[0]['value'];
		}
		else {
			$sub_title = '';
		}
		$items[] = array(
			'title'            => $node->title,
			'link'             => $link,
			'background_image' => $background_image,
			'sub_title'        => $sub_title,
		);
	}

	return $items;
}

function tradexperts_brokers_block() {
	$query = db_select('node', 'n')
		->fields('n', array('title'));
	$query->condition('n.type', 'brokers')
		  ->condition('n.status', NODE_PUBLISHED);
	$query->innerJoin('field_data_field_url_address', 'url_address', 'url_address.entity_id = n.nid AND url_address.bundle = :bundle AND url_address.entity_type = :entity_type', array(
		':bundle'      => 'brokers',
		':entity_type' => 'node',
	));
	$query->orderBy('n.created', 'DESC');
	$query->addField('url_address', 'field_url_address_value', 'url_address');
	$query->innerJoin('field_data_field_icon', 'icon', 'icon.entity_id = n.nid AND icon.bundle = :bundle AND icon.entity_type = :entity_type', array(
		':bundle'      => 'brokers',
		':entity_type' => 'node',
	));
	$query->innerJoin('file_managed', 'file', 'file.fid = icon.field_icon_fid');
	$query->fields('file', array('uri'));

	return theme('tradexperts_brokers', array(
		'brokers' => $query->execute()->fetchAll(),
	));
}

/**
 * Returns form for callback.
 */
function tradexperts_callback_form($form, &$form_state) {
	$form['number'] = array(
		'#type'     => 'textfield',
		'#title'    => t('Number of registered accounts'),
		'#required' => TRUE,
	);

	$form['center'] = array(
		'#type'    => 'radios',
		'#title'   => t('Dealing center'),
		'#options' => array(
			'alpari'     => t('Alpari'),
			'forex4you'  => t('Forex4you'),
			'instaforex' => t('InstaForex'),
			'roboforex'  => t('Roboforex'),
		),
		'#required' => TRUE,
	);

	$form['email'] = array(
		'#type'    => 'textfield',
		'#title'   => t('E-mail'),
		'#required' => TRUE,
	);

	$form['message'] = array(
		'#type'  => 'textarea',
		'#title' => t('Message'),
	);

	$form['send'] = array(
		'#type'  => 'submit',
		'#value' => t('Send'),
	);

	return $form;
}

function tradexperts_callback_form_validate($form, &$form_state) {
	if (!empty($form_state['values']['email']) && !valid_email_address($form_state['values']['email'])) {
		form_set_error('email', t('Email address is invalid'));
	}
}

function tradexperts_callback_form_submit($form, &$form_state) {
	tradexperts_send_feedback($form_state['values']);
}

function tradexperts_send_feedback($values) {
	$module = 'tradexperts';
	$key    = 'send_feedback';

	$to       = variable_get('site_mail');
	$from     = 'noreply@' . $_SERVER['SERVER_NAME'];
	$language = language_default();
	$send     = TRUE;

	$result = drupal_mail($module, $key, $to, $language, $values, $from, $send);

	if ($result['result']) {
		drupal_set_message(t('Your message has been sent.'));
	}
	else {
		drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
	}
}

/**
 * Implements hook_mail().
 */
function tradexperts_mail($key, &$message, $params) {
	$options = array(
		'langcode' => $message['language']->language,
	);

	switch ($key) {
		case 'send_feedback':
			$dealing_center = array(
				'alpari'     => t('Alpari'),
				'forex4you'  => t('Forex4you'),
				'instaforex' => t('InstaForex'),
				'roboforex'  => t('Roboforex'),
			);
			$message['subject'] = t('Order a license key');
			$message['body'][] = t('Number of registered accounts: @number', array(
				'@number' => $params['number'],
			), $options);
			$message['body'][] = t('Dealing center: @center', array(
				'@center' => $dealing_center[ $params['center'] ],
			), $options);
			$message['body'][] = t('Email: @email', array(
				'@email' => $params['email'],
			), $options);
			if (!empty(trim(strip_tags($params['message'])))) {
				$message['body'][] = t('Message: @message', array(
					'@message' => $params['message'],
				), $options);
			}
			break;
	}
}